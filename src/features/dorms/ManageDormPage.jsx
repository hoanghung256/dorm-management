import { useState, useMemo, useEffect } from "react";
import {
    Box,
    Button,
    Dialog,
    DialogTitle,
    DialogContent,
    DialogActions,
    TextField,
    Typography,
    IconButton,
    Stack,
    Paper,
    Chip,
    Tooltip,
    Divider,
    Grid,
} from "@mui/material";
import AddIcon from "@mui/icons-material/Add";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";
import RefreshIcon from "@mui/icons-material/Refresh";
import MeetingRoomIcon from "@mui/icons-material/MeetingRoom"; // Add Button
import { useNavigate } from "react-router-dom"; // Add Button
import { api } from "../../../convex/_generated/api";
import useConvexUserData from "../../hooks/useConvexUserData";
import { convexQueryOneTime } from "../../services/convexClient";
import CreateDormModal from "./CreateDormModal";

function ManageDormPage() {
    const user = useConvexUserData();
    const navigate = useNavigate(); // Add Button

    const [pageData, setPageData] = useState({ items: [], page: 1, pageSize: 5, total: 0, totalPages: 0 });
    const [openDialog, setOpenDialog] = useState(false);
    const [searchTerm, setSearchTerm] = useState("");

    useEffect(() => {
        if (user?.detail?._id) {
            getDorms();
        }
    }, [user]);

    const getDorms = async () => {
        const res = await convexQueryOneTime(api.functions.dorms.listDormsByLandlord, {
            landlordId: user.detail._id,
            page: 1,
            pageSize: 10,
            search: searchTerm || undefined,
        });
        setPageData(res);
    };

    const openCreate = () => {
        setOpenDialog(true);
    };

     return (
        <>
            <CreateDormModal
                landlordId={user?.detail?._id}
                open={openDialog}
                onClose={() => setOpenDialog(false)}
                refresh={getDorms}
            />
            <Box>
                <Stack direction="row" alignItems="center" justifyContent="space-between" mb={2}>
                    <Typography variant="h5" fontWeight={600}>
                        Danh s√°ch Nh√† Tr·ªç
                    </Typography>
                    <Stack direction="row" spacing={1}>
                        <Tooltip title="L√†m m·ªõi">
                            <IconButton onClick={getDorms}>
                                <RefreshIcon />
                            </IconButton>
                        </Tooltip>
                        <Button
                            variant="contained"
                            startIcon={<AddIcon />}
                            onClick={openCreate}
                            disabled={!user?.detail?._id}
                        >
                            Th√™m
                        </Button>
                    </Stack>
                </Stack>

                {pageData?.items.length === 0 && user?.detail?._id && (
                    <Typography variant="body2" sx={{ py: 2 }}>
                        Ch∆∞a c√≥ tr·ªç n√†o.
                    </Typography>
                )}

                <Box sx={{ 
                    
                    padding: { xs: 0, md: 1 }
                }}>
                    <Grid container spacing={4}>
                        {pageData?.items.map((d) => (
                            <Grid 
                                item 
                                     
                                sm={6}      
                                key={d._id}
                            >
                                <Paper
                                    elevation={4} 
                                    sx={{ 
                                        p: 3, 
                                        display: "flex", 
                                        flexDirection: "column", 
                                        gap: 2,
                                        width: '550px',
                                        minHeight: '340px',
                                        height: '100%', 
                                        borderRadius: 5,
                                        position: 'relative',
                                        boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
                                        transition: 'transform 0.2s, box-shadow 0.2s',
                                        '&:hover': {
                                            transform: 'translateY(-4px)',
                                            boxShadow: '0 8px 16px rgba(0, 0, 0, 0.2)',
                                        },
                                    }}
                                >
                                    
                                    
                                    {/* H√ÄNG 1: T√äN V√Ä N√öT H√ÄNH ƒê·ªòNG (HEADER C·ª¶A CARD) */}
                                    <Stack direction="row" justifyContent="space-between" alignItems="center" spacing={1}>
                                        {/* T√™n Nh√† Tr·ªç */}
                                        <Typography variant="h6" fontSize={20} fontWeight={700} sx={{ pr: 1 }}>
                                            {d.name}
                                        </Typography>
                                        
                                        {/* C·ª•m n√∫t H√†nh ƒë·ªông (Qu·∫£n l√Ω ph√≤ng, S·ª≠a, X√≥a) */}
                                        <Stack direction="row" spacing={0.5} alignItems="center" sx={{ flexShrink: 0 }}>
                                            
                                            <Tooltip title="S·ª≠a">
                                                <IconButton size="small" onClick={() => openEdit(d)}>
                                                    <EditIcon fontSize="small" />
                                                </IconButton>
                                            </Tooltip>
                                            <Tooltip title="X√≥a">
                                                <IconButton size="small" color="error" onClick={() => handleDelete(d)}>
                                                    <DeleteIcon fontSize="small" />
                                                </IconButton>
                                            </Tooltip>
                                        </Stack>
                                    </Stack>

                                    <Divider /> {/* ƒê∆∞·ªùng ph√¢n c√°ch m·ªèng */}

                                    {/* B·ªê C·ª§C D·ªåC M·ªöI CHO TH√îNG TIN CHI TI·∫æT */}
                                    <Stack spacing={3}> 
                                        
                                        {/* 1. ƒê·ªãa ch·ªâ */}
                                        <Stack spacing={0.5}>
                                            <Typography variant="body2" color="text.secondary" fontWeight={500}>
                                                ƒê·ªãa ch·ªâ
                                            </Typography>
                                            <Stack direction="row" alignItems="center" spacing={0.5}>
                                                <Box component="span" sx={{ fontSize: '1rem', color: 'text.secondary' }}>üìç</Box> 
                                                <Typography variant="body1">
                                                    {d.address || "-"}
                                                </Typography>
                                            </Stack>
                                        </Stack>

                                        {/* 2. M√¥ t·∫£ (ƒë·∫∑t ngay d∆∞·ªõi ƒë·ªãa ch·ªâ) */}
                                        <Stack spacing={0.5}>
                                            <Typography variant="body2" color="text.secondary" fontWeight={500}>
                                                M√¥ t·∫£
                                            </Typography>
                                            <Typography 
                                                variant="body2" 
                                                color="text.primary" 
                                                // üåü ƒêO·∫†N CODE C·∫¶N THI·∫æT ƒê·ªÇ C·∫ÆT N·ªòI DUNG V√Ä KH√îNG K√âO D√ÄI TH·∫∫
                                                sx={{ 
                                                    fontStyle: 'italic',
                                                    overflow: 'hidden',
                                                    textOverflow: 'ellipsis',
                                                    display: '-webkit-box',
                                                    WebkitLineClamp: 3, // Gi·ªõi h·∫°n T·ªêI ƒêA 3 d√≤ng
                                                    WebkitBoxOrient: 'vertical',
                                                }}
                                            >
                                                {d.description || "K√Ω t√∫c x√° sinh vi√™n Sunrise l√† h√¨nh m·∫´u l√Ω t∆∞·ªüng cho cu·ªôc s·ªëng hi·ªán ƒë·∫°i, ti·ªán nghi v√† an to√†n, ƒë·∫∑c bi·ªát ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ t·ªëi ∆∞u h√≥a tr·∫£i nghi·ªám h·ªçc t·∫≠p v√† sinh ho·∫°t c·ªßa sinh vi√™n. V·ªõi ph∆∞∆°ng ch√¢m 'Nh√† l√† n∆°i ƒë·ªÉ tr·ªü v·ªÅ, v√† h·ªçc t·∫≠p l√† n∆°i ƒë·ªÉ ph√°t tri·ªÉn,' ch√∫ng t√¥i cam k·∫øt cung c·∫•p m·ªôt m√¥i tr∆∞·ªùng s·ªëng ch·∫•t l∆∞·ª£ng cao, v∆∞·ª£t xa ti√™u chu·∫©n nh√† tr·ªç th√¥ng th∆∞·ªùng."}
                                            </Typography>
                                        </Stack>
                                        
                                        {/* 3. Th√¥ng tin Chip (Ng√†y ch·ªët v√† Ng√†y t·∫°o) */}
                                       <Stack 
                                            direction={{ xs: 'column', sm: 'row' }} // X·∫øp ngang tr√™n m√†n h√¨nh l·ªõn, x·∫øp d·ªçc tr√™n m√†n h√¨nh nh·ªè
                                            justifyContent="space-between" 
                                            alignItems={{ xs: 'flex-start', sm: 'flex-end' }} 
                                            spacing={2}
                                            sx={{ mt: 'auto' }} // ƒê·∫®Y XU·ªêNG D∆Ø·ªöI C√ôNG
                                        >
                                            {/* C·ªôt Tr√°i: Th√¥ng tin Chip (Ng√†y ch·ªët v√† Ng√†y t·∫°o) */}
                                            <Stack spacing={0.5}>
                                                <Typography variant="body2" color="text.secondary" fontWeight={500}>
                                                    Th√¥ng tin ng√†y
                                                </Typography>
                                                <Stack direction="row" spacing={1} alignItems="center" flexWrap="wrap">
                                                    <Chip
                                                        size="small"
                                                        label={d.involveDueDate ? `Ch·ªët: Ng√†y ${d.involveDueDate}` : "Ng√†y ch·ªët: Ch∆∞a ƒë·∫∑t"}
                                                        
                                                        variant="filled" 
                                                        sx={{ width: 'fit-content', height: 24, fontSize: '0.8rem' }}
                                                    />
                                                    {d.createdAt && (
                                                        <Chip
                                                            size="small"
                                                            label={"T·∫°o: " + new Date(d.createdAt).toLocaleDateString("vi-VN", { day: "2-digit", month: "2-digit", year: "numeric", })}
                                                            variant="outlined"
                                                            sx={{ width: 'fit-content', height: 24, fontSize: '0.8rem' }}
                                                        />
                                                    )}
                                                </Stack>
                                            </Stack>

                                            {/* C·ªôt Ph·∫£i: N√öT "PH√íNG" (H√ÄNH ƒê·ªòNG) */}
                                            <Button
                                                size="large" // TƒÉng k√≠ch th∆∞·ªõc n√∫t ·ªü cu·ªëi card
                                                variant="contained"
                                                startIcon={<MeetingRoomIcon />}
                                                onClick={() => navigate(`/landlord/dorms/${d._id}`)}
                                                sx={{ minWidth: 120, py: 1 }}
                                            >
                                                Qu·∫£n l√Ω ph√≤ng
                                            </Button>
                                        </Stack>
                                    </Stack>
                                </Paper>
                            </Grid>
                        ))}
                    </Grid>
                </Box>


                {/* {nextCursor && (
                <Box mt={3} textAlign="center">
                    <Button onClick={handleLoadMore} variant="outlined">
                        T·∫£i th√™m
                    </Button>
                </Box>
            )} */}

                <Divider sx={{ mt: 4 }} />
            </Box>
        </>
    );
}

export default ManageDormPage;
